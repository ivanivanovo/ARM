\ ------------------------------------------------------------------------------
\ Последовательность вида ( Un Un-1...U1 n ) в математике называется n-мерным 
\ вектором. Для оперирования с такими объектами ввел векторный стек, иначе -стек 
\ векторов. ( Un Un-1...U1 n--) помещается на именованый векторный стек как 
\ единый объект. Для работы с векторами определенной размерности, можно опре-
\ делить частные слова. 
\ Вектор изымается с V-стека также единым куском (-- Un Un-1...U1 n).
\ U VSTACK NameStack
\ a b c d 4 NameStack >STACK 
\ NameStack STACK>  ( --a b c d 4)

: VSTACK ( u "name" --) \ создать векторный стек "name" и зарезервировать
                        \ для него u ЯЧЕЕК 
    CREATE HERE 2 CELLS + , CELLS HERE OVER + CELL+ , 0 , 
    ALLOT ;               \                          \   \дно
                           \ указатель (адрес)        \ограничитель(макс. адрес)
\ Запись "a b c d 4 NameStack >STACK" размещает в памяти так:
\ ПАМЯТЬ: указатель ограничитель 0 ....  a b c d 4.....|
\ NameStack ---^ v     v                         ^     ^
\                |     |-------------------------+-----|
\                |-------------------------------|

: >STACK ( x*i x*u u name -- x*i ) \ переместить u элементов в стек "name"
    OVER 0= IF 2DROP EXIT THEN
    DUP >R @ CELL+ \ начальный адрес 
    OVER CELLS  OVER + \ конечный адрес
        DUP  R@ CELL+ @ > ABORT" Переполнение v-стека."
    DUP >R         2DUP > ABORT" Только положительное число."
    DO I ! CELL NEGATE +LOOP 
    R> R> !
    ;
: STACK@ ( name -- x*n n) \ вернуть из стека name последнюю запись
    @ DUP @ ?DUP 0= ABORT" Исчерпание v-стека." 
    1+ CELLS SWAP CELL+ DUP ROT -
    DO I @  CELL +LOOP 
    ;
: STACK> ( name -- x*n n) \ снять со стека name последнюю запись
    DUP >R 
    STACK@  
    DUP 1+ CELLS R@ @ SWAP - R> !
    ;
: STACK>DROP ( name -- ) \  убрать со стека name последнюю запись
    DUP @ DUP @ ?DUP 0= IF 2DROP EXIT THEN
    1+ CELLS - SWAP !
    ;   
\ ------------------------------------------------------------------------------
256 VSTACK V \ общий v-стек
: >V ( i*n n --) \ положить в v-стек n элементов
    V >STACK ;
: V> ( -- i*n n) \ снять с v-стека последнюю запись    
    V STACK> ;
: V@ ( -- i*n n) \ вернуть с v-стека последнюю запись
    V STACK@ ;
: V>DROP ( --) \ убрать с v-стека последнюю запись
    V STACK>DROP ;
\ частные слова для работы с двумерными векторами ( adr u строки например)
: 2>V ( a b --) 2 >V ; : 2Vcheck ( n --) 2 = 0= ABORT" Ошибка на V-стеке." ;
: 2V> ( -- a b) V> 2Vcheck ; : 2V@ ( -- a b) V@ 2Vcheck ; 
: 1>V ( a --) 1 >V ; : 1Vcheck ( n --) 1 = 0= ABORT" Ошибка на V-стеке." ;
: 1V> ( -- a ) V> 1Vcheck ; : 1V@ ( -- a ) V@ 1Vcheck ; 
